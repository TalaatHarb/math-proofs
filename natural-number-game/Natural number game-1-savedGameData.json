{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw [h],\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw [h],\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw [add_succ, add_zero],\r\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nrefl,\r\nrw [add_succ, ih],\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d ih,\r\nrw [add_zero, add_zero],\r\nrefl,\r\nrw [add_succ, add_succ, ih, <- add_succ],\r\nrefl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrw [add_zero, add_zero],\r\nrefl,\r\nrw [add_succ, add_succ, ih],\r\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrw [add_zero, zero_add],\r\nrefl,\r\nrw [add_succ, succ_add, ih],\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nrw [zero_add, one_eq_succ_zero],\r\nrefl,\r\nrw [succ_add, ih],\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw [add_assoc, add_comm b c, <- add_assoc],\r\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with d ih,\r\nrefl,\r\nrw [mul_succ, ih, add_zero],\r\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "induction m with d ih,\r\nrefl,\r\nrw [one_eq_succ_zero, mul_succ, mul_zero, zero_add],\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with d ih,\r\nrefl,\r\nrw [mul_succ, ih, succ_eq_add_one],\r\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrw [add_zero, mul_zero, add_zero],\r\nrefl,\r\nrw [add_succ, mul_succ, mul_succ, ih, <- add_assoc],\r\nrefl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d ih,\r\nrepeat {rw [mul_zero]},\r\nrepeat {rw [mul_succ]},\r\nrwa [mul_add, ih],"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrwa [mul_zero, mul_zero, add_zero],\r\nrwa [mul_succ, mul_succ, ih, succ_eq_add_one, <- add_assoc, add_assoc (a*d) a _, add_succ, add_comm a d, succ_eq_add_one, <- add_assoc, <- add_assoc],"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrwa [add_zero, zero_mul, add_zero],\r\nrwa [add_succ, succ_mul, succ_mul, ih, <- add_assoc],"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with d ih,\r\nrwa [mul_zero, zero_mul],\r\nrwa [mul_succ, succ_mul, ih],"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rwa [<-mul_assoc b a c, <-mul_assoc a b c, mul_comm a b],"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with d ih,\r\nrefl,\r\nrwa [pow_succ, mul_zero],"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "induction a with d ih,\r\nrefl,\r\nrwa [one_eq_succ_zero, pow_succ, pow_zero, one_mul],"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with d ih,\r\nrefl,\r\nrwa [pow_succ, ih, one_mul],"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nrwa [add_zero, pow_zero, mul_one],\r\nrwa [add_succ, pow_succ, pow_succ, ih, mul_assoc],"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nrepeat { rw [pow_zero]},\r\nrwa [one_mul],\r\nrepeat { rw [pow_succ]},\r\nrwa [mul_assoc (a ^ d) a (b ^ d * b), mul_comm a (b^d *b), <-mul_assoc, <-mul_assoc, <-mul_assoc, ih, mul_assoc _ b a, mul_comm b a, <- mul_assoc],"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nrwa [pow_zero, mul_zero, pow_zero],\r\nrwa [pow_succ, mul_succ, ih, pow_add],"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rwa [two_eq_succ_one, pow_succ, pow_one, pow_succ, pow_one, pow_succ, pow_one,\r\n  mul_add, add_mul, add_mul, mul_comm b a, add_comm (a*a), add_right_comm, <-add_assoc, succ_eq_add_one, <- mul_add, mul_comm (1+1) a, mul_assoc , add_mul 1 1 b, one_mul, add_assoc, add_comm, add_comm (b*b) (a*a)],"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nexact h,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nexact l t,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "apply l,\r\napply j,\r\napply h,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\napply pqr,\r\nexact p,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qf p,\r\napply qf,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros pq hq p,\r\napply hq,\r\napply pq,\r\nexact p, "
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nexact f15 ( f11 (f9 (f8 (f5 (f2 (f1 (a))))))),"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "apply h,\r\nexact p,"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nhave u := l t,\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "apply l,\r\napply j,\r\napply h,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\napply pqr,\r\nexact p,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qr p,\r\napply qr,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "intros pq nq p,\r\nhave q:= pq p,\r\ncontradiction,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nexact f15 ( f11 (f9 (f8 (f5 (f2 (f1 (a))))))),"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\ncases pq with p q,\r\nconstructor,\r\nexact q,\r\nexact p,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros pq qr,\r\ncases pq with p _,\r\ncases qr with _ r,\r\nconstructor,\r\nexact p,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\ncases hpq with pq qp,\r\ncases hqr with qr rq,\r\nconstructor,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\nintro r,\r\napply qp,\r\napply rq,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\nconstructor,\r\nintro p,\r\napply hqr.mp,\r\napply hpq.mp,\r\nexact p,\r\nintro r,\r\napply hpq.mpr,\r\napply hqr.mpr,\r\nexact r, "
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\ncases hpq with p q,\r\nright,\r\nexact p,\r\nleft,\r\nexact q,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nintro pAqr,\r\ncases pAqr with p qr,\r\ncases qr with q r,\r\nleft,\r\nconstructor,\r\nexact p,\r\nexact q,\r\nright,\r\nconstructor,\r\nexact p,\r\nexact r,\r\nintro pAqpAr,\r\ncases pAqpAr with pAq pAr,\r\ncases pAq with p q,\r\nconstructor,\r\nexact p,\r\nleft,\r\nexact q,\r\ncases pAr with p r,\r\nconstructor,\r\nexact p,\r\nright,\r\nexact r,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p np,\r\ncontradiction,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "intros npnq p,\r\nby_cases q:Q,\r\nexact q,\r\nhave np:= npnq q,\r\ncontradiction,"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "cases hs with hz hsu,\r\nrefl,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "cases h with hz hs,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro ab,\r\nrw [ab],\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nexact succ_inj,\r\nexact succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with d ih,\r\nrw [add_zero, add_zero] at h,\r\nexact h,\r\nrw [add_succ, add_succ] at h,\r\nexact ih (succ_inj h),"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro ht,\r\ninduction t with d ih,\r\nrw [zero_add, zero_add] at ht,\r\nexact ht,\r\nrw [succ_add, succ_add] at ht,\r\nexact ih (succ_inj ht),"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nexact add_right_cancel _ _ _,\r\nintro h,\r\nrw [h],\r\nrefl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw [<-add_zero a, add_assoc, zero_add] at h,\r\nexact add_left_cancel a b 0 h,"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "intro h,\r\ncontradiction,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "induction a with d _,\r\nrw [zero_add] at H,\r\nexact H,\r\nrw [succ_add] at H,\r\nhave nH := succ_ne_zero (d + b),\r\ncontradiction,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction b with d _,\r\nrw [add_zero] at h,\r\nexact h,\r\nrw [add_succ] at h,\r\nhave nh := succ_ne_zero (a + d),\r\ncontradiction,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "induction d with t ih,\r\nrw [zero_add],\r\nrefl,\r\nrw [succ_add],\r\nexact succ_eq_succ_of_eq ih,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with d ih,\r\nexact zero_ne_succ 0,\r\nintro h,\r\nhave ht := succ_inj h,\r\ncontradiction,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intros hanz hbnz,\r\ninduction a with c hc,\r\ncontradiction,\r\ninduction b with d hd,\r\ncontradiction,\r\nrw [succ_mul, add_succ],\r\nintro h,\r\nhave hz:= succ_ne_zero (c * succ d + d),\r\ncontradiction,"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "induction a with c _,\r\nleft,\r\nrefl,\r\ninduction b with d _,\r\nright,\r\nrefl,\r\nhave hzdc:= mul_pos (succ d) (succ c),\r\nhave hdz := hzdc (succ_ne_zero d) (succ_ne_zero c),\r\ncontradiction,"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nexact eq_zero_or_eq_zero_of_mul_eq_zero a b,\r\nintro h,\r\ncases h with ha hb,\r\nrwa [ha, zero_mul],\r\nrwa [hb, mul_zero],"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction c with d hd generalizing b,\r\nrw [mul_zero] at h,\r\nhave hz:= eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\ncases hz with ha hb,\r\ncontradiction,\r\nexact hb,\r\ninduction b with b hb,\r\nrw [mul_zero] at h,\r\nhave hz:= eq_zero_or_eq_zero_of_mul_eq_zero  a (succ d) (eq.symm h),\r\ncases hz with ha hb,\r\ncontradiction,\r\nexact eq.symm hb,\r\nrw [mul_succ, mul_succ] at h,\r\nhave hf := hd b (add_right_cancel (a*b) a (a*d) h),\r\nrw [hf],\r\nrefl,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "rw [le_iff_exists_add, add_comm],\r\nuse 1,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "rw [le_iff_exists_add],\r\nuse 0,\r\nrefl,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw [le_iff_exists_add] at *,\r\ncases h with c h',\r\nuse (succ c),\r\nrwa [add_succ, h'],"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction a with d hd,\r\nrefl,\r\napply le_succ,\r\nexact hd,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with d hab,\r\ncases hbc with e hbc,\r\nrw [hab, add_assoc] at hbc,\r\nrw [hbc],\r\nuse (d+e),\r\nrefl,"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with c hab,\r\ncases hba with d hba,\r\nrw [hab, add_assoc] at hba,\r\nhave hc := eq_zero_of_add_right_eq_self (eq.symm hba),\r\nhave hc1 := add_right_eq_zero hc,\r\nrw [hc1, add_zero] at hab,\r\nexact eq.symm hab,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with c h,\r\nhave hr := add_right_eq_zero (eq.symm h),\r\nexact hr,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hab,\r\nrw [hab, <- succ_add],\r\nuse c,\r\nrefl,"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with b ih,\r\nright,\r\nexact zero_le a,\r\ncases ih with h1 h2,\r\nleft,\r\nexact le_succ a b h1,\r\ncases h2 with c h,\r\ncases c with d hc,\r\nrw [add_zero] at h,\r\nleft,\r\nrw [h, succ_eq_add_one, add_comm],\r\nexact one_add_le_self b,\r\nrw [succ_eq_add_one, add_comm d 1, <- add_assoc, <- succ_eq_add_one] at h,\r\nright,\r\nuse d,\r\nexact h,"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "use 1,\r\nrw [succ_eq_add_one],\r\nrefl,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intros hab t,\r\ncases hab with c hab,\r\nrw [hab, add_assoc, add_comm c t, <- add_assoc],\r\nuse c,\r\nrefl,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro hab,\r\ncases hab with c hab,\r\nrw [succ_eq_add_one, succ_eq_add_one] at hab,\r\nrw [add_comm b 1,add_comm a 1, add_assoc] at hab,\r\nhave h:= add_left_cancel 1 b (a+c) hab,\r\nrw [h],\r\nuse c,\r\nrefl,"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c h,\r\nrw [succ_eq_add_one, add_assoc, add_comm 1 c, <-succ_eq_add_one, <-add_zero a, add_assoc _ 0 (succ c), zero_add] at h,\r\nhave hr:= eq.symm (add_left_cancel a 0 (succ c) h),\r\nhave hc:= succ_ne_zero a,\r\ncontradiction,"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hab,\r\nrw [hab, <-add_assoc],\r\nuse c,\r\nrefl,"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with hab hnba,\r\ncases hab with c hab,\r\ninduction c with d hd,\r\nrw [add_zero] at hab,\r\nrw [hab] at hnba,\r\nhave hf:= le_refl a,\r\ncontradiction,\r\nrw [succ_eq_add_one, ← add_assoc, add_comm, ← add_assoc, add_comm 1 a, ← succ_eq_add_one] at hab,\r\nuse d,\r\nexact hab,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nconstructor,\r\ncases h with c h,\r\nrw [succ_eq_add_one, add_assoc] at h,\r\nuse (1+c),\r\nexact h,\r\nintro hb,\r\ncases hb with c hb,\r\nrw [succ_eq_add_one] at h,\r\ncases h with d h,\r\nrw [h, add_assoc, add_assoc, <- add_zero a, add_assoc, zero_add] at hb,\r\nhave ha:= add_left_cancel a 0 _ hb,\r\nrw [add_comm, <- succ_eq_add_one] at ha,\r\nhave hr:= eq.symm ha,\r\nhave hc:= succ_ne_zero (d+c),\r\ncontradiction,"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "constructor,\r\nexact lt_aux_one a b,\r\nexact lt_aux_two a b,"
    }
  ]
}